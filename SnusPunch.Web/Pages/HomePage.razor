@page "/"
@using SnusPunch.Shared.Models.Entry
@layout FeedLayout
@attribute [Authorize]

<PageTitle>SnusPunch</PageTitle>

<MessageComponent Errors="EntryViewModel.Errors" SuccessMessages="EntryViewModel.SuccessMessages" IsBusy="EntryViewModel.IsBusy" />

<div class="content">
    <h2>
        Puncha här
    </h2>

    <div class="row gap-1">
        @if(mChosenSnus != null)
        {
            <input class="flex-grow-1" disabled @bind="mChosenSnus.Name" />
        }
        else
        {
            <input disabled class="flex-grow-1" />
        }
        <button @onclick="async () => await ChangeSnus()">Ändra Snus</button>
    </div>
    

    <textarea placeholder="Skriv något roligt om du vill!" class="full-width" @bind="mDescription" rows="2"></textarea>

    @if (mBrowserFile != null)
    {
        <p class="mn">
            <img src="@mImagePreview" class="full-width" />
            <button class="button-danger mt-1" @onclick="() => RemoveImage()">Ta Bort Bild</button>
        </p>
    }
    else
    {
        <p class="mn">
            <InputFile accept=".png,.jpeg,.jpg" @key="mInputFileId" OnChange="LoadImage" />
        </p>
    }

    <button class="full-width mt-1" @onclick="async () => await AddEntry()">Stämpla</button>
</div>

<div class="content mt-1">
    <div class="row align-items-bottom justify-content-between">
        <h2>Senaste Stämplingara</h2>

        <div class="row align-items-center">
            <label for="fetchEmptyPunches">Visa tomma stämplingar</label>
            <input class="ml-1 checkbox" type="checkbox" id="fetchEmptyPunches" @bind="mFetchEmptyPunches" @bind:after="async () => await GetEntries()" />
        </div>
    </div>
    
    <div class="row">
        <p class="flex-grow-1">
            <input class="flex-grow-1" @bind:event="oninput" @bind="mPaginationParameters.SearchString" @onkeydown="async (x) => await OnKeyDown(x)" placeholder="Sök.." />
            <button @onclick="async () => await OnSearch()">
                <span class="align-middle material-symbols--search" />
                <span class="align-middle"> Sök</span>
            </button>
        </p>

        <p>
            Filter
            <select @bind="mEntryFilterEnum" @bind:after="async () => await OnSearch()">
                @foreach(var sFilter in Enum.GetValues(typeof(EntryFilterEnum)))
                {
                    <option value="@sFilter">@EntryFilterEnumHelper.GetEntryFilterEnumName((EntryFilterEnum)sFilter)</option>
                }
            </select>
        </p>
    </div>
    

    @foreach (var sEntry in mEntryList)
    {
        <div class="entry-card @(sEntry != mEntryList.First() ? "mt-1" : "")">
            <div class="row justify-content-between align-items-start">
                <div class="row align-items-center gap-1">
                    <button @onclick="() => ShowProfilePicture(sEntry)" class="profile-picture-button">
                        <img class="profile-picture-round" src="@sEntry.UserProfilePictureUrl" />
                    </button>

                    <div>
                        <p class="mn">
                            @sEntry.UserName tog en <a href="Snus/@sEntry.SnusName">@sEntry.SnusName</a>
                        </p>
                        <span title="@sEntry.CreateDate">
                            @sEntry.GetTimeAgo()
                        </span>
                    </div>
                </div>
                

                <AuthorizeView>
                    @if(context.User.IsInRole("Admin"))
                    {
                        <button title="Radera inlägg" class="button-icon">
                            <span @onclick="async () => await AdminRemoveEntry(sEntry)" class="material-symbols--delete" />
                        </button>
                    }
                    else
                    {
                        if(context.User.Identity.Name == sEntry.UserName)
                        {
                            <button title="Radera inlägg" class="button-icon">
                                <span @onclick="async () => await RemoveEntry(sEntry)" class="material-symbols--delete" />
                            </button>
                        }
                    }
                </AuthorizeView>
            </div>

            @if (!string.IsNullOrEmpty(sEntry.Description))
            {
                <p>
                    @sEntry.Description
                </p>
            }

            @if(!string.IsNullOrEmpty(sEntry.PhotoUrl))
            {
                <p>
                    <img class="full-width" src="@sEntry.PhotoUrl" />
                </p>
            }

            <div class="row mt-1 justify-content-between">
                <button @onclick="() => ShowLikes(sEntry)" class="text-button">
                    <span title="Klicka för att se vilka som gillar inlägget!">@sEntry.GetLikesString()</span>
                </button>
                <span>@sEntry.GetCommentsString()</span>
            </div>

            <hr />

            <div class="row gap-1">
                <button @onclick="async () => await ToggleLike(sEntry)" class="full-width">@(sEntry.LikedByUser ? "Du gillar detta" : "Gilla")</button>
                <button @onclick="async () => await Comment(sEntry)" class="full-width">Kommentera</button>
            </div>
        </div>
    }

    <div class="mt-1">
        @if (mPaginationMetaData != null)
        {
            <PaginationComponent OnSearch="async () => await GetEntries()" PaginationMetaData="mPaginationMetaData" PaginationParameters="mPaginationParameters" />
        }
    </div>
</div>