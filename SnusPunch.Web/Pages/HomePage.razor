@page "/"
@using SnusPunch.Shared.Models.Entry
@using SnusPunch.Web.Components.Feed
@layout FeedLayout
@attribute [Authorize]

<PageTitle>SnusPunch</PageTitle>

<MessageComponent Errors="EntryViewModel.Errors" SuccessMessages="EntryViewModel.SuccessMessages" IsBusy="EntryViewModel.IsBusy" />

<div class="content">
    <h2>
        Stämpla här!
    </h2>

    <div class="row gap-1">
        @if(mChosenSnus != null)
        {
            <input class="flex-grow-1" disabled @bind="mChosenSnus.Name" />
        }
        else
        {
            <input disabled class="flex-grow-1" />
        }
        <button @onclick="async () => await ChangeSnus()">Ändra Snus</button>
    </div>
    

    <textarea placeholder="Skriv något roligt om du vill!" class="full-width" @bind="mDescription" rows="2"></textarea>

    <p class="mn">
        @if (mBrowserFile != null)
        {
            <img src="@mImagePreview" class="full-width" />
            <button class="button-danger mt-1" @onclick="() => RemoveImage()">Ta Bort Bild</button> <br/>
        }
        <InputFile class="mt-1" accept=".png,.jpeg,.jpg" @key="mInputFileId" OnChange="LoadImage" />
    </p>

    <button class="full-width mt-1" @onclick="async () => await AddEntry()">Stämpla</button>
</div>

<div class="content mt-1">
    <div class="row align-items-bottom justify-content-between">
        <h2>Senaste Stämplingara</h2>

        <div class="row align-items-center gap-05">
            <label for="fetchEmptyPunches">Visa tomma inlägg</label>
            <input class="checkbox" type="checkbox" id="fetchEmptyPunches" @bind="mFetchEmptyPunches" @bind:after="async () => await GetEntries()" />
        </div>
    </div>
    
    <div class="row">
        <p class="flex-grow-1">
            <input class="flex-grow-1" @bind:event="oninput" @bind="mPaginationParameters.SearchString" @onkeydown="async (x) => await OnKeyDown(x)" placeholder="Sök.." />
            <button @onclick="async () => await OnSearch()">
                <span class="align-middle material-symbols--search" />
                <span class="align-middle"> Sök</span>
            </button>
        </p>

        <p>
            Filter
            <select @bind="mEntryFilterEnum" @bind:after="async () => await OnSearch()">
                @foreach(var sFilter in Enum.GetValues(typeof(EntryFilterEnum)))
                {
                    <option value="@sFilter">@EntryFilterEnumHelper.GetEntryFilterEnumName((EntryFilterEnum)sFilter)</option>
                }
            </select>
        </p>
    </div>
    
    <!-- Visar alla inlägg -->
    <EntryListComponent Refresh="GetEntries" EntryList="mEntryList" />

    <div class="mt-1">
        @if (mPaginationMetaData != null)
        {
            <PaginationComponent OnSearch="async () => await GetEntries()" PaginationMetaData="mPaginationMetaData" PaginationParameters="mPaginationParameters" />
        }
    </div>
</div>