@using SnusPunch.Shared.Models.Snus
@using SnusPunch.Web.ViewModels.Snus

<MessageComponent Errors="SnusViewModel.Errors" SuccessMessages="SnusViewModel.SuccessMessages" IsBusy="SnusViewModel.IsBusy"/>

<EditForm OnValidSubmit="async () => await Confirm()" Model="mSnusModel">
    <DataAnnotationsValidator/>
    <ValidationSummary />

    <p>
        <label for="snusName">Namn</label>
        <input id="snusName" class="full-width" @bind="mSnusModel.Name"/>
    </p>

    <p>
        <label for="snusPriceInSek">Pris (SEK)</label>
        <input id="snusPriceInSek" class="full-width" @bind="mSnusModel.PriceInSek" />
    </p>

    <p>
        <label for="snusPortionCount">Portioner per dosa</label>
        <input id="snusPortionCount" class="full-width" @bind="mSnusModel.PortionCount" />
    </p>

    <p>
        <label for="snusWeightInGrams">Vikt (g)</label>
        <input id="snusWeightInGrams" class="full-width" @bind="mSnusModel.WeightInGrams" />
    </p>

    <p>
        <label for="snusNicotineInMgPerGram">Nikotinhalt (mg/g)</label>
        <input id="snusNicotineInMgPerGram" class="full-width" @bind="mSnusModel.NicotineInMgPerGram" />
    </p>

    <div class="row gap-1 mt-1 justify-content-end">
        <button disabled="@SnusViewModel.IsBusy" class="button button-warning" type="button" @onclick="async () => await Close()">Avbryt</button>
        <button disabled="@SnusViewModel.IsBusy" class="button button-success" type="submit">@(SnusModel == null ? "Lägg till snus" : "Spara ändringar")</button>
    </div>
</EditForm>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public SnusModel SnusModel { get; set; }
    [Inject] SnusViewModel SnusViewModel { get; set; }

    private SnusModel mSnusModel = new SnusModel();

    protected override void OnInitialized()
    {
        if(SnusModel != null)
        {
            mSnusModel = new SnusModel(SnusModel);
        }
    }

    private async Task Confirm() => await BlazoredModal.CloseAsync(ModalResult.Ok(mSnusModel));

    private async Task Close() => await BlazoredModal.CancelAsync();
}
