@using SnusPunch.Shared.Models.Entry
@using SnusPunch.Shared.Models.Entry.Likes
@using SnusPunch.Shared.Models.Pagination
@using SnusPunch.Shared.Models.Snus
@using SnusPunch.Web.Components.Comment
@using SnusPunch.Web.ViewModels.Snus

<MessageComponent Errors="EntryViewModel.Errors" SuccessMessages="EntryViewModel.SuccessMessages" IsBusy="EntryViewModel.IsBusy" />

@if(EntryDto != null)
{
    <div style="max-height: calc(80vh - 1px); overflow-y: auto">
        <div class="row justify-content-between align-items-start">
            <div class="row align-items-center gap-1">
                <button @onclick="() => ShowProfilePicture(EntryDto.UserName, EntryDto.UserProfilePictureUrl)" class="profile-picture-button">
                    <img class="profile-picture-round" src="@EntryDto.UserProfilePictureUrl" />
                </button>

                <div>
                    <p class="mn">
                        @EntryDto.UserName tog en <a href="Snus/@EntryDto.SnusName">@EntryDto.SnusName</a>
                    </p>
                    <span title="@EntryDto.CreateDate">
                        @EntryDto.GetTimeAgo()
                    </span>
                </div>
            </div>


            <AuthorizeView>
                @if (context.User.IsInRole("Admin"))
                {
                    <button title="Radera inlägg" class="button-icon">
                        <span @onclick="async () => await AdminRemoveEntry(EntryDto)" class="material-symbols--delete" />
                    </button>
                }
                else
                {
                    if (context.User.Identity.Name == EntryDto.UserName)
                    {
                        <button title="Radera inlägg" class="button-icon">
                            <span @onclick="async () => await RemoveEntry(EntryDto)" class="material-symbols--delete" />
                        </button>
                    }
                }
            </AuthorizeView>
        </div>

        @if (!string.IsNullOrEmpty(EntryDto.Description))
        {
            <p>
                @EntryDto.Description
            </p>
        }

        @if (!string.IsNullOrEmpty(EntryDto.PhotoUrl))
        {
            <p>
                <img class="full-width" src="@EntryDto.PhotoUrl" />
            </p>
        }

        <div class="row mt-1 justify-content-between">
            <button @onclick="() => ShowLikes(EntryDto)" class="text-button">
                <span title="Klicka för att se vilka som gillar inlägget!">@EntryDto.GetLikesString()</span>
            </button>
            <button class="text-button">
                <span title="Klicka för att se kommentarer!">@EntryDto.GetCommentsString()</span>
            </button>
        </div>

        <hr />

        <div class="row gap-05">
            <button @onclick="async () => await ToggleLike(EntryDto)" class="full-width">@(EntryDto.LikedByUser ? "Du gillar detta" : "Gilla")</button>
            <button @onclick="@(async () => await Comment())" class="full-width">Kommentera</button>
        </div>

        <hr/>
        @if (EntryDto.Comments.Count > 0)
        {
            <select @onchange="async (e) => await OnCommentSortChange(e)">
                <option value="Popular">Populäraste</option>
                <option value="Newest">Senaste</option>
                <option value="Oldest">Äldsta</option>
            </select>

            @foreach (var sComment in EntryDto.Comments)
            {
                <CommentComponent Comment="sComment"
                                  OnLike="ToggleLike"
                                  OnRemove="RemoveEntryComment"
                                  OnAdminRemove="AdminRemoveEntryComment"
                                  OnReply="ReplyToComment"
                                  OnShowProfilePicture="() => ShowProfilePicture(sComment.UserName, sComment.ProfilePictureUrl)" />
            }

            @if ((mPaginationMetaDataComments?.TotalCount ?? 0) > EntryDto.Comments.Count)
            {
                <button @onclick="async () => await FetchMoreComments()" class="text-button mt-1">Visa fler kommentarer</button>
            }
        }

        <div class="comment-input">
            <textarea @bind:event="oninput" @bind="mAddEntryCommentDto.Comment" class="full-width" id="commentInput" placeholder="@mCommentPlaceholder" rows="2" />
            <button disabled="@(mAddEntryCommentDto.Comment.Length == 0)" @onclick="async () => await AddEntryComment()" class="full-width">Skicka kommentar</button>
        </div>
    </div>
}