@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using SnusPunch.Shared.Models.Auth
@using SnusPunch.Shared.Models.Notification
@using SnusPunch.Web.Identity
@using SnusPunch.Web.ViewModels
@using SnusPunch.Web.ViewModels.Snus

<header>
     <div class="header-wrapper">
        <a class="row gap-1 align-items-center" href="">
            <img height="48" src="icon-192.png"/>
            <h1>SnusPunch</h1>
        </a>

        <nav>
            <ul>
                <li>
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="material-symbols--home" />
                    </NavLink>
                </li>
                <li>
                    <NavLink class="nav-link" href="Statistics" Match="NavLinkMatch.All">
                        <span class="icomoon-free--stats-bars" />
                    </NavLink>
                </li>
                <li>
                    <NavLink class="nav-link" href="Snus" Match="NavLinkMatch.All">
                        <span class="material-symbols--circle"/>
                    </NavLink>
                </li>
                <li>
                    <NavLink class="nav-link" href="Users" Match="NavLinkMatch.All">
                        <span class="mdi--users" />
                    </NavLink>
                </li>
                <li>
                    <div class="dropdown">
                        <button title="Vänförfrågningar" @onclick="ShowFriendRequests" class="button-icon button-icon-vertical">
                            <span class="weui--add-friends-filled" />
                            @if(AuthViewModel.UserInfoModel?.FriendRequests > 0)
                            {
                                <span class="notification-badge" id="notificationBadge">@(AuthViewModel.UserInfoModel.FriendRequests > 99 ? "99+" : AuthViewModel.UserInfoModel.FriendRequests)</span>
                            }
                        </button>
                        <div id="friendRequestDropDown" class="dropdown-content">
                            @if ((AuthViewModel.UserInfoModel?.FriendRequests ?? 0) == 0)
                            {
                                <p class="dropdown-text-small">
                                    Du har inga vänförfrågningar!
                                </p>
                            }
                            else
                            {
                                @foreach(var sFriendRequest in UserViewModel.FriendRequests)
                                {
                                    <div class="row gap-05 align-items-center">
                                        <a class="row align-items-center gap-05" href="Profile/@sFriendRequest.UserName">
                                            <img class="profile-picture-round" src="@sFriendRequest?.ProfilePictureUrl" />

                                            @sFriendRequest.UserName
                                        </a>
                                            

                                        <button @onclick="async () => await AcceptFriendRequest(sFriendRequest)">Bekräfta</button>

                                        <button @onclick="async () => await DenyFriendRequest(sFriendRequest)" class="button-warning">Ta bort</button>
                                    </div>
                                        
                                }
                            }
                        </div>
                    </div>
                </li>
                <li>
                    <div class="dropdown">
                        <button title="Notifikationer" @onclick="ShowNotifications" class="button-icon button-icon-vertical">
                            <span class="mingcute--notification-fill" />
                            @if(AuthViewModel.UserInfoModel?.UnreadNotifications > 0)
                            {
                                <span class="notification-badge" id="notificationBadge">@(AuthViewModel.UserInfoModel.UnreadNotifications > 99 ? "99+" : AuthViewModel.UserInfoModel.UnreadNotifications)</span>
                            }
                        </button>
                        <div id="notificationDropDown" class="dropdown-content">
                            @if (UserViewModel.NotificationPaginationMetaData != null && UserViewModel.NotificationPaginationMetaData.TotalCount == 0)
                            {
                                <p class="dropdown-text-small">
                                    Du har inga notifikationer!
                                </p>
                            }
                            else
                            {
                                @foreach(var sNotification in UserViewModel.Notifications)
                                {
                                    <div class="notification-row @(sNotification.NotificationViewed ? "" : "notification-not-viewed")">
                                        <a style="margin-top: 0 !important" class="row align-items-center gap-05" href="Profile/@sNotification.UserName">
                                            <img class="profile-picture-round" src="@sNotification?.ProfilePictureUrl" />

                                            @sNotification.UserName
                                        </a>

                                        <button style="white-space: nowrap; font-size: 1.5rem; margin-top: 0 !important" @onclick="async () => await OnNotificationClick(sNotification)" class="text-button">
                                            @sNotification.ToString()
                                        </button>

                                        <span title="@sNotification.CreateDate" style="white-space: nowrap; font-size: 1rem; font-weight: normal; margin-left: 0.5rem"> @sNotification.GetTimeAgo()</span>
                                    </div>
                                }

                                @if ((UserViewModel.NotificationPaginationMetaData?.TotalCount ?? 0) > UserViewModel.Notifications.Count)
                                {
                                    <button style="margin-left: 1rem" @onclick="async () => await UserViewModel.FetchMoreNotifications()" class="text-button">Visa fler notifikationer</button>
                                }
                            }
                        </div>
                    </div>
                </li>
                <li>
                    <div class="dropdown">
                        <button title="Konto" onclick="toggleAccountDropDown()" class="button-drop-down">
                            <img class="profile-picture-round" src="@AuthViewModel.UserInfoModel?.ProfilePictureUrl" />
                        </button>
                        <div id="accountDropDown" class="dropdown-content">
                            <AuthorizeView>
                                <NavLink class="nav-link mn" href="@($"Profile/{context.User.Identity.Name}")">
                                    <div class="row gap-05 align-items-center px-05">
                                        <img class="profile-picture-round" src="@AuthViewModel.UserInfoModel?.ProfilePictureUrl" />

                                        <p class="dropdown-text">
                                            @context.User.Identity.Name
                                        </p>
                                    </div>
                                </NavLink>
                            </AuthorizeView>

                            <hr/>

                            <NavLink class="nav-link" href="Account">
                                Inställningar
                            </NavLink>
                            <button style="padding: 0.5rem" class="button-drop-down" @onclick="async () => await AuthViewModel.Logout()">Logga ut</button>
                        </div>
                    </div>
                </li>
            </ul>
        </nav>
     </div>
 </header>

 <script>
    function toggleAccountDropDown() {
        document.getElementById("accountDropDown").classList.toggle("show");
        document.getElementById("friendRequestDropDown").classList.remove("show");
        document.getElementById("notificationDropDown").classList.remove("show");
    }

    function toggleNotificationDropDown() {
        document.getElementById("notificationDropDown").classList.toggle("show");
        document.getElementById("friendRequestDropDown").classList.remove("show");
        document.getElementById("accountDropDown").classList.remove("show");
    }

    function toggleFriendRequestsDropDown() {
        document.getElementById("friendRequestDropDown").classList.toggle("show");
        document.getElementById("notificationDropDown").classList.remove("show");
        document.getElementById("accountDropDown").classList.remove("show");
    }

    function playNotificationSound() {
        const audio = new Audio("sounds/notification.mp3");
        audio.play();
    }

    //Stäng om man klickar utanför
    window.onclick = function (event) {
        if (!event.target.matches('.button-drop-down') && !event.target.matches('.button-icon') && !event.target.closest('.dropdown-content')) {
            var dropdowns = document.getElementsByClassName("dropdown-content");
            var i;
            for (i = 0; i < dropdowns.length; i++) {
                var openDropdown = dropdowns[i];
                if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.remove('show');
                }
            }
        }
    }
 </script>