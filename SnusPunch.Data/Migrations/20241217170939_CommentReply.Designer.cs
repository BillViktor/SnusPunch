// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnusPunch.Data.DbContexts;

#nullable disable

namespace SnusPunch.Data.Migrations
{
    [DbContext(typeof(SnusPunchDbContext))]
    [Migration("20241217170939_CommentReply")]
    partial class CommentReply
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryCommentLikeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("EntryCommentId")
                        .HasColumnType("int");

                    b.Property<string>("SnusPunchUserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SnusPunchUserModelId");

                    b.HasIndex("EntryCommentId", "SnusPunchUserModelId")
                        .IsUnique()
                        .HasFilter("[SnusPunchUserModelId] IS NOT NULL");

                    b.ToTable("tblEntryCommentLike", (string)null);
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryCommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("EntryId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<string>("SnusPunchUserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SnusPunchUserModelIdRepliedTo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("SnusPunchUserModelId");

                    b.HasIndex("SnusPunchUserModelIdRepliedTo");

                    b.ToTable("tblEntryComment", (string)null);
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryLikeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("EntryId")
                        .HasColumnType("int");

                    b.Property<string>("SnusPunchUserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SnusPunchUserModelId");

                    b.HasIndex("EntryId", "SnusPunchUserModelId")
                        .IsUnique()
                        .HasFilter("[SnusPunchUserModelId] IS NOT NULL");

                    b.ToTable("tblEntryLike", (string)null);
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SnusId")
                        .HasColumnType("int");

                    b.Property<string>("SnusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SnusPortionNicotineInMg")
                        .HasColumnType("float");

                    b.Property<decimal>("SnusPortionPriceInSek")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("SnusPunchUserModelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SnusId");

                    b.HasIndex("SnusPunchUserModelId");

                    b.ToTable("tblEntry", null, t =>
                        {
                            t.HasTrigger("TR_tblEntry_Insert");

                            t.HasTrigger("TR_tblEntry_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Identity.SnusPunchFriendModel", b =>
                {
                    b.Property<string>("SnusPunchUserModelOneId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SnusPunchUserModelTwoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SnusPunchUserModelOneId", "SnusPunchUserModelTwoId");

                    b.HasIndex("SnusPunchUserModelTwoId");

                    b.ToTable("tblSnusPunchUserFriend", (string)null);
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Identity.SnusPunchFriendRequestModel", b =>
                {
                    b.Property<string>("SnusPunchUserModelOneId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SnusPunchUserModelTwoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Denied")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SnusPunchUserModelOneId", "SnusPunchUserModelTwoId");

                    b.HasIndex("SnusPunchUserModelTwoId");

                    b.ToTable("tblSnusPunchUserFriendRequest", (string)null);
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Identity.SnusPunchUserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("FavoriteSnusId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FavoriteSnusId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasTrigger("TR_AspNetUsers_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SnusPunch.Data.Models.NotificationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationActionEnum")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("NotificationViewed")
                        .HasColumnType("bit");

                    b.Property<string>("SnusPunchUserModelIdOne")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SnusPunchUserModelIdTwo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SnusPunchUserModelIdOne");

                    b.HasIndex("SnusPunchUserModelIdTwo");

                    b.ToTable("tblSnusPunchUserNotifications", (string)null);
                });

            modelBuilder.Entity("SnusPunch.Shared.Models.Snus.SnusModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NicotineInMgPerGram")
                        .HasColumnType("float");

                    b.Property<double>("NicotinePerPortion")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("NicotinePerPortion");

                    b.Property<int>("PortionCount")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceInSek")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("PricePerPortion")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(6,2)")
                        .HasComputedColumnSql("PricePerPortion");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WeightInGrams")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("tblSnus", null, t =>
                        {
                            t.HasTrigger("TR_tblSnus_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("SnusPunch.Shared.Models.Statistics.StatisticsTimePeriodResponseDto", b =>
                {
                    b.Property<decimal>("AvgCostPerDayInSek")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("AvgNicotinePerDayInMg")
                        .HasColumnType("float");

                    b.Property<double>("AvgSnusCountPerDay")
                        .HasColumnType("float");

                    b.Property<string>("MostUsedSnus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MostUsedSnusCount")
                        .HasColumnType("int");

                    b.Property<int>("SnusCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCostInSek")
                        .HasColumnType("decimal(6,2)");

                    b.Property<double>("TotalNicotineInMg")
                        .HasColumnType("float");

                    b.ToTable("StatisticsTimePeriod", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryCommentLikeModel", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Entry.EntryCommentModel", "EntryCommentModel")
                        .WithMany("CommentLikes")
                        .HasForeignKey("EntryCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModel")
                        .WithMany()
                        .HasForeignKey("SnusPunchUserModelId");

                    b.Navigation("EntryCommentModel");

                    b.Navigation("SnusPunchUserModel");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryCommentModel", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Entry.EntryModel", "EntryModel")
                        .WithMany("Comments")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnusPunch.Data.Models.Entry.EntryCommentModel", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModel")
                        .WithMany()
                        .HasForeignKey("SnusPunchUserModelId");

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModelRepliedTo")
                        .WithMany()
                        .HasForeignKey("SnusPunchUserModelIdRepliedTo")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EntryModel");

                    b.Navigation("ParentComment");

                    b.Navigation("SnusPunchUserModel");

                    b.Navigation("SnusPunchUserModelRepliedTo");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryLikeModel", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Entry.EntryModel", "EntryModel")
                        .WithMany("Likes")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModel")
                        .WithMany()
                        .HasForeignKey("SnusPunchUserModelId");

                    b.Navigation("EntryModel");

                    b.Navigation("SnusPunchUserModel");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryModel", b =>
                {
                    b.HasOne("SnusPunch.Shared.Models.Snus.SnusModel", "Snus")
                        .WithMany()
                        .HasForeignKey("SnusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModel")
                        .WithMany("Entries")
                        .HasForeignKey("SnusPunchUserModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Snus");

                    b.Navigation("SnusPunchUserModel");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Identity.SnusPunchFriendModel", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModelOne")
                        .WithMany("FriendsAddedByUser")
                        .HasForeignKey("SnusPunchUserModelOneId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModelTwo")
                        .WithMany("FriendsAddedByOthers")
                        .HasForeignKey("SnusPunchUserModelTwoId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("SnusPunchUserModelOne");

                    b.Navigation("SnusPunchUserModelTwo");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Identity.SnusPunchFriendRequestModel", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModelOne")
                        .WithMany()
                        .HasForeignKey("SnusPunchUserModelOneId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModelTwo")
                        .WithMany()
                        .HasForeignKey("SnusPunchUserModelTwoId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("SnusPunchUserModelOne");

                    b.Navigation("SnusPunchUserModelTwo");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Identity.SnusPunchUserModel", b =>
                {
                    b.HasOne("SnusPunch.Shared.Models.Snus.SnusModel", "FavoriteSnus")
                        .WithMany()
                        .HasForeignKey("FavoriteSnusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FavoriteSnus");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.NotificationModel", b =>
                {
                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModelOne")
                        .WithMany()
                        .HasForeignKey("SnusPunchUserModelIdOne")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("SnusPunch.Data.Models.Identity.SnusPunchUserModel", "SnusPunchUserModelTwo")
                        .WithMany()
                        .HasForeignKey("SnusPunchUserModelIdTwo")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("SnusPunchUserModelOne");

                    b.Navigation("SnusPunchUserModelTwo");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryCommentModel", b =>
                {
                    b.Navigation("CommentLikes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Entry.EntryModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("SnusPunch.Data.Models.Identity.SnusPunchUserModel", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("FriendsAddedByOthers");

                    b.Navigation("FriendsAddedByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
